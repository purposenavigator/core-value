# .github/workflows/deploy.yml
name: Deploy Application to AWS EC2 with HTTPS

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      domain_name:
        description: 'Domain name for HTTPS (e.g., example.com)'
        required: true
      certbot_email:
        description: "Email for Let's Encrypt notifications"
        required: true
      ec2_instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't3.medium'
      ec2_key_pair_name:
        description: 'EC2 Key Pair Name (MUST exist in the AWS region)'
        required: true
        default: 'self-analyzation-key'
      security_group_name:
        description: 'Name for the EC2 Security Group'
        required: true
        default: 'my-app-sg'
      ec2_instance_name_tag:
        description: 'Value for the Name tag of the EC2 instance'
        required: true
        default: 'my-app-instance'
      elastic_ip_name_tag:
        description: 'Value for the Name tag of the Elastic IP address'
        required: true
        default: 'my-app-eip'
      repository_to_clone:
        description: 'Repository to clone (e.g., your-username/your-repo)'
        required: true
        default: 'purposenavigator/core-value' # ご自身のレポジトリに変更してください
      repository_branch:
        description: 'Branch to clone'
        required: true
        default: 'main'

jobs:
  # ===============================================================
  # Job 1: Provision Infrastructure (Idempotent)
  # ===============================================================
  provision_infrastructure:
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.associate_eip.outputs.ELASTIC_IP }}
      instance_id: ${{ steps.launch_ec2.outputs.INSTANCE_ID }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Verify EC2 Key Pair Existence
        run: |
          aws ec2 describe-key-pairs --key-names "${{ github.event.inputs.ec2_key_pair_name }}" \
          || (echo "Error: Key Pair '${{ github.event.inputs.ec2_key_pair_name }}' not found." && exit 1)

      - name: Create Security Group (Idempotent)
        id: create_sg
        run: |
          SG_NAME="${{ github.event.inputs.security_group_name }}"
          VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query "Vpcs[0].VpcId" --output text)
          SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values="$SG_NAME" Name=vpc-id,Values="$VPC_ID" --query "SecurityGroups[0].GroupId" --output text)
          if [ "$SG_ID" == "None" ]; then
            echo "Creating security group '$SG_NAME'..."
            SG_ID=$(aws ec2 create-security-group --group-name "$SG_NAME" --description "SG for App" --vpc-id "$VPC_ID" --query 'GroupId' --output text)
            aws ec2 authorize-security-group-ingress --group-id "$SG_ID" --protocol tcp --port 22 --cidr "0.0.0.0/0"
            aws ec2 authorize-security-group-ingress --group-id "$SG_ID" --protocol tcp --port 80 --cidr "0.0.0.0/0"
            aws ec2 authorize-security-group-ingress --group-id "$SG_ID" --protocol tcp --port 443 --cidr "0.0.0.0/0"
          else
            echo "Security group '$SG_NAME' already exists."
          fi
          echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_OUTPUT

      - name: Launch EC2 Instance (Idempotent)
        id: launch_ec2
        run: |
          INSTANCE_NAME_TAG="${{ github.event.inputs.ec2_instance_name_tag }}"
          EXISTING_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME_TAG" "Name=instance-state-name,Values=pending,running,stopping,stopped" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -n "$EXISTING_INSTANCE_ID" ]; then
            echo "Instance $EXISTING_INSTANCE_ID already exists. Using existing."
            INSTANCE_ID="$EXISTING_INSTANCE_ID"
            # Ensure instance is running
            if [ "$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].State.Name' --output text)" != "running" ]; then
              aws ec2 start-instances --instance-ids "$INSTANCE_ID"
              aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
            fi
          else
            echo "Launching new EC2 instance..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id "ami-0c55b159cbfafe1f0" # Ubuntu 22.04 LTS (Update AMI for your region)
              --instance-type "${{ github.event.inputs.ec2_instance_type }}" \
              --key-name "${{ github.event.inputs.ec2_key_pair_name }}" \
              --security-group-ids "${{ steps.create_sg.outputs.SECURITY_GROUP_ID }}" \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_TAG}]" \
              --query 'Instances[0].InstanceId' --output text)
            aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Allocate and Associate Elastic IP (Idempotent)
        id: associate_eip
        run: |
          EIP_NAME_TAG="${{ github.event.inputs.elastic_ip_name_tag }}"
          INSTANCE_ID="${{ steps.launch_ec2.outputs.INSTANCE_ID }}"
          # Check if instance is already associated with an EIP
          EXISTING_EIP=$(aws ec2 describe-addresses --filters "Name=instance-id,Values=$INSTANCE_ID" --query "Addresses[0].PublicIp" --output text)
          if [ "$EXISTING_EIP" != "None" ]; then
              echo "Instance is already associated with Elastic IP: $EXISTING_EIP"
              echo "ELASTIC_IP=$EXISTING_EIP" >> $GITHUB_OUTPUT
              exit 0
          fi
          
          # Find an unassociated EIP with the specified tag
          ADDRESS_INFO=$(aws ec2 describe-addresses --filters "Name=tag:Name,Values=$EIP_NAME_TAG" --query "Addresses[?AssociationId==null]|[0]")
          ALLOCATION_ID=$(echo "$ADDRESS_INFO" | jq -r '.AllocationId // empty')
          
          if [ -z "$ALLOCATION_ID" ]; then
            echo "Allocating new Elastic IP..."
            ALLOCATION_ID=$(aws ec2 allocate-address --domain vpc --query 'AllocationId' --output text)
            aws ec2 create-tags --resources "$ALLOCATION_ID" --tags "Key=Name,Value=$EIP_NAME_TAG"
          fi
          PUBLIC_IP=$(aws ec2 describe-addresses --allocation-ids "$ALLOCATION_ID" --query "Addresses[0].PublicIp" --output text)
          aws ec2 associate-address --instance-id "$INSTANCE_ID" --allocation-id "$ALLOCATION_ID"
          echo "Associated Elastic IP: $PUBLIC_IP"
          echo "ELASTIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT

  # ===============================================================
  # Job 2: Deploy Application and Secure with HTTPS
  # ===============================================================
  deploy_and_secure_application:
    runs-on: ubuntu-latest
    needs: provision_infrastructure
    if: needs.provision_infrastructure.outputs.public_ip != ''

    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Wait for SSH and add host key to known_hosts
        run: |
          PUBLIC_IP=${{ needs.provision_infrastructure.outputs.public_ip }}
          # Add the host key to known_hosts to avoid prompt and MITM warnings
          ssh-keyscan -H $PUBLIC_IP >> ~/.ssh/known_hosts
          # Wait for the SSH port to be open by retrying connection
          echo "Waiting for SSH connection..."
          for i in {1..20}; do
            if ssh -o ConnectTimeout=5 ubuntu@$PUBLIC_IP "echo SSH is ready"; then
              echo "SSH connection established."
              break
            fi
            echo "Attempt $i failed, retrying in 15 seconds..."
            sleep 15
          done

      - name: Deploy, Configure, and Secure Server
        env:
          # Secrets for the remote server
          GH_PAT: ${{ secrets.GH_PAT }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MONGODB_DB_NAME: ${{ secrets.MONGODB_DB_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TOKEN_ALGORITHM: ${{ secrets.TOKEN_ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          # Inputs from the workflow dispatch
          PUBLIC_IP: ${{ needs.provision_infrastructure.outputs.public_ip }}
          REPO: ${{ github.event.inputs.repository_to_clone }}
          BRANCH: ${{ github.event.inputs.repository_branch }}
          DOMAIN_NAME: ${{ github.event.inputs.domain_name }}
          CERTBOT_EMAIL: ${{ github.event.inputs.certbot_email }}
        run: |
          # The entire script is sent to the EC2 instance to be executed.
          # Using 'EOF' ensures that variables like $HOME are expanded on the remote server.
          ssh -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP 'bash -s' << 'EOF'
            # === This script runs on the EC2 instance ===

            # Exit immediately if a command exits with a non-zero status.
            set -euo pipefail

            # --- Environment Variables ---
            # These are inherited from the `env` block of the GitHub Actions step
            echo ">>> [0/9] Setting up environment variables..."
            export REPO="${REPO}"
            export BRANCH="${BRANCH}"
            export DOMAIN_NAME="${DOMAIN_NAME}"
            export CERTBOT_EMAIL="${CERTBOT_EMAIL}"
            export GH_PAT="${GH_PAT}"
            export APP_DIR="/home/ubuntu/app"

            # --- 1. Install Dependencies ---
            echo ">>> [1/9] Installing prerequisites (Git, Docker, Certbot)..."
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates curl git gettext-base
            # Install Docker
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            sudo chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            # Add ubuntu user to docker group to run docker commands without sudo
            sudo usermod -aG docker ubuntu
            # Install Certbot
            sudo apt-get install -y certbot

            # --- 2. Clone or Update Repository ---
            echo ">>> [2/9] Cloning/Updating repository: ${REPO}..."
            if [ -d "$APP_DIR" ]; then
              echo "Repository exists. Pulling latest changes..."
              cd "$APP_DIR"
              git pull origin "${BRANCH}"
            else
              echo "Cloning new repository..."
              git clone -b "${BRANCH}" "https://x-access-token:${GH_PAT}@github.com/${REPO}.git" "$APP_DIR"
            fi
            cd "$APP_DIR"

            # --- 3. Create .env File ---
            echo ">>> [3/9] Creating .env file for backend..."
            # Note: MONGODB_URI is hardcoded to use the Docker network service name
            cat > ./api/.env << EOT
            OPENAI_API_KEY=${OPENAI_API_KEY}
            MONGODB_URI=mongodb://mongodb:27017
            MONGODB_DB_NAME=${MONGODB_DB_NAME}
            SECRET_KEY=${SECRET_KEY}
            TOKEN_ALGORITHM=${TOKEN_ALGORITHM}
            ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
            EOT
            echo ".env file created."

            # --- 4. Prepare for HTTPS: Initial Nginx Setup (HTTP only) ---
            echo ">>> [4/9] Preparing for HTTPS: Deploying HTTP-only Nginx config..."
            cp ./nginx/nginx-http.conf ./nginx/default.conf

            # --- 5. Initial Docker Compose Up (for HTTP challenge) ---
            echo ">>> [5/9] Starting services with Docker Compose to solve HTTP challenge..."
            # Create directories for Certbot if they don't exist
            mkdir -p ./certbot/conf ./certbot/www
            # Run docker compose in detached mode. Use 'newgrp' to apply docker group permissions immediately.
            newgrp docker <<EODocker
            docker compose up --build -d
            EODocker

            # --- 6. Obtain SSL Certificate with Certbot ---
            echo ">>> [6/9] Obtaining/Renewing SSL Certificate for ${DOMAIN_NAME}..."
            # Check if certificate already exists
            if [ -d "./certbot/conf/live/${DOMAIN_NAME}" ]; then
              echo "Certificate found. Attempting renewal..."
              sudo certbot renew
            else
              echo "No certificate found. Obtaining a new one..."
              # Use --webroot for validation. Certbot will place a file in the webroot,
              # which our HTTP-only Nginx will serve for Let's Encrypt to validate.
              sudo certbot certonly --webroot -w "$APP_DIR/certbot/www" \
                --email "${CERTBOT_EMAIL}" \
                -d "${DOMAIN_NAME}" \
                --rsa-key-size 4096 \
                --agree-tos \
                --non-interactive
            fi
            
            # Generate dhparam file for stronger security (if it doesn't exist)
            if [ ! -f "./certbot/conf/ssl-dhparams.pem" ]; then
                sudo openssl dhparam -out "$APP_DIR/certbot/conf/ssl-dhparams.pem" 2048
            fi


            # --- 7. Stop Services ---
            echo ">>> [7/9] Stopping services to apply HTTPS config..."
            newgrp docker <<EODocker
            docker compose down
            EODocker

            # --- 8. Switch to HTTPS Nginx Config ---
            echo ">>> [8/9] Switching to HTTPS Nginx configuration..."
            # Use envsubst to replace ${DOMAIN_NAME} in the template with the actual domain
            envsubst '${DOMAIN_NAME}' < ./nginx/nginx-https.conf.template > ./nginx/default.conf
            echo "HTTPS config applied."

            # --- 9. Final Relaunch with HTTPS ---
            echo ">>> [9/9] Relaunching services with HTTPS enabled..."
            newgrp docker <<EODocker
            docker compose up --build -d
            EODocker

            echo "✅ Deployment successful! Your application is running on https://${DOMAIN_NAME}"
          EOF
