name: Deploy to EC2 by Tag

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region where the EC2 instance is located'
        required: true
        default: 'us-east-1'
      ec2_instance_name_tag:
        description: 'The "Name" tag of the target EC2 instance'
        required: true
        default: 'self-analyzation-instance' # プロビジョニング時に使用したNameタグ
      repository_branch:
        description: 'Branch to pull and deploy'
        required: true
        default: 'main'
      repository_directory:
        description: 'Directory where the repo was cloned on the server'
        required: true
        default: 'core-value'

jobs:
  # JOB 1: Nameタグを元にEC2インスタンスのIPアドレスを検索する
  find_ec2_ip:
    name: Find EC2 IP Address
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Get Instance Public IP by Name Tag
        id: get_ip
        run: |
          INSTANCE_NAME="${{ github.event.inputs.ec2_instance_name_tag }}"
          AWS_REGION="${{ github.event.inputs.aws_region }}"
          
          echo "Searching for a running instance with tag Name=${INSTANCE_NAME} in region ${AWS_REGION}..."
          
          PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${INSTANCE_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region "${AWS_REGION}")
            
          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" == "None" ]; then
            echo "::error::Could not find a running EC2 instance with tag Name=${INSTANCE_NAME}"
            exit 1
          fi
          
          echo "Found instance with Public IP: ${PUBLIC_IP}"
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_OUTPUT

  # JOB 2: 取得したIPアドレスを使ってデプロイを実行する
  deploy_and_restart:
    name: Deploy and Restart Application
    runs-on: ubuntu-latest
    needs: find_ec2_ip

    steps:
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy, Update Env, and Restart Docker Compose
        env:
          # .envファイル用のSecrets
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DB_NAME: ${{ secrets.MONGODB_DB_NAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          TOKEN_ALGORITHM: ${{ secrets.TOKEN_ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          
        run: |
          TARGET_IP="${{ needs.find_ec2_ip.outputs.public_ip }}"
          
          echo ">>> Starting deployment to ${TARGET_IP} <<<"
          
          # ★★★★★ 修正点 1: ヒアドキュメントの 'EOF' を EOF に変更 ★★★★★
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_rsa "ubuntu@${TARGET_IP}" << EOF
            
            # --- ここから下のコマンドはEC2サーバー上で実行されます ---
            
            # コマンドが失敗したら、すぐにスクリプトを終了させる
            set -e

            echo ">>> [1/4] Navigating to repository directory..."
            # GitHub Actionsの変数を直接展開する
            cd "/home/ubuntu/${{ github.event.inputs.repository_directory }}" || { echo "ERROR: Repository directory not found!"; exit 1; }

            echo ">>> [2/4] Fetching and pulling latest code..."
            git fetch origin
            git reset --hard "origin/${{ github.event.inputs.repository_branch }}"
            git pull

            # ★★★★★ 修正点 2: .envファイル作成方法の変更 ★★★★★
            echo ">>> [3/4] Updating .env file..."
            APP_ENV_PATH="/home/ubuntu/${{ github.event.inputs.repository_directory }}/api/app"
            cd "\$APP_ENV_PATH" || { echo "ERROR: .env directory not found!"; exit 1; }
            
            # 確実性の高いechoコマンドで.envファイルを一行ずつ作成する
            echo "OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}" > .env
            echo "MONGODB_URI=${{ env.MONGODB_URI }}" >> .env
            echo "MONGODB_DB_NAME=${{ env.MONGODB_DB_NAME }}" >> .env
            echo "SECRET_KEY=${{ env.SECRET_KEY }}" >> .env
            echo "TOKEN_ALGORITHM=${{ env.TOKEN_ALGORITHM }}" >> .env
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
            
            echo ".env file updated successfully."
            
            echo ">>> [4/4] Rebuilding and restarting Docker Compose services..."
            cd "/home/ubuntu/${{ github.event.inputs.repository_directory }}" # プロジェクトのルートに戻る
            sudo docker compose up --build -d

            echo ">>> Deployment finished successfully! <<<"
          EOF
